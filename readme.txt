# 웹개발 기본질문

# 브라우저에 url을 입력하면 어떤일이 일어나는지 설명해주세요.
1. 브라우저에 url을 입력하면 PC에 hosts에서 해당 url에 접속을 한적이 있는 확인
2. 항상 연결을 ISP로 할수없음으로 DNS에서 캐시를 확인한다 캐시가 없다면 
3. ISP DNS에서 해당 url의 ip를 가져와 TCP연결을 한다.
4. TCP연결후 success라면 서버에서 리퀘스트가 날아오고 클라이언트에서 response를 내보내고 브라우저에 HTML을 보여준다.

[추가질문]
1. 큰대기업의 경우 서버가 CDN + GSLB로 설계가 되어있으며 여기서 GSLB는 재난에 대응한 서버를 가지고있다.
2. 재난이 일어날시 헬스체크를 통해 국가/도시 단위의 서버를 파악하며 내가 요청한 주소에 가장 근접한 서버에 DNS를 가져와 보여준다.

# 브라우저 렌더링 원리 
1. HTML을 먼저 불러온다 이때 작은단위의 코드를 8바이트 형태로 들고와 HTML을 parse하고 노드를생성해 HTML DOM TREE를 생성한다. 이때 link와 이미지는 다운로드를 받고 script는 다운로드가 완료될때까지 기다렸다가 돔트리를 생성한다.
2. CSS를 불러와 HTML과 마찬가지로 CSS parse하고 CSS노드를 생성하고 CSS 오브젝트 모델을 생성한다. CSS노드를 생성한다. 이때 리플로우와 리페인팅이 일어나는데 리플로우는 사이즈단위를 담당하고 리페인팅은 색상단위를 담당한다. 이때 리플로우시 display:none으로 지정되어있는 
  - CSS는 생성이 제한되어 웹접근성에서 보이지않는 형태로 지정되어 리플로우가 되지않는다.
  - 그리고 transform과 opacity는 리플로우가 되지않으며 애니메이션 제작에 좋으나 이를 제외한 나머지의 CSS의 경우 리플로우가 일어나 사이트가 딜레이되는 원인이 된다.
3. html 돔트리와 CSS돔트리가 만나 렌더트리를 생성하고 컴포지트를 생성하여 사이트를 보여준다.

# HTTP 요청 메서드의 종류는 무엇이 있으며 각각의 특징을 설명해보세요.
1. GET 사이트의 데이터를 조회할때 사용한다. POST도 조회를 할수있으나 GET은 캐싱 동작을한다.
2. POST는 데이터를 추가/생성을 할때 사용한다. 데이터를 조회 하는데 있어서 JSON으로 조회데이터를 넘겨야한다면 POST를 사용한다. [필수]
3. PUT은 업데이트의 개념이고 요청 메시지에 리소스가 있으면 덮어쓰고 없으면 새로생성한다.
4. PATCH는 리소스 일부 부분을 변경하는 메소드
5. DELET는 리소스를 제거하는 메소드

[추가질문]
URL과 URI의 차이점
1. URL은 자원의 경로를 식별하는데 사용하고
2. URI는 자원상의 리소스 자원자체를 식별하는 고유한 문자열 시퀀스를 의미한다. [필수]

# 객체지향프로그래밍(OOP)가 무엇이고 어떤특징을 가지고 있는지?
1. 객체들의 상호작용으로 프로그램을 표현하려는 프로그래밍 패러다임입니다. 객체지향 프로그래밍은 객체를 정의하고 객체의 상호작용으로 로직을 구성하는 방식입니다. [필수]
2. SOLID원칙이 있다 [필수]
- 단일 책임 원칙 : 하나의 클래스는 하나의 원칙만 주어진다.
- 개방-폐쇄 원칙 : 확장은 열려있고, 변경에는 닫혀있어야한다.
- 리스코프 원칙 : 자식클래스는 부모클래스에서 가능한 행위는 수행할 수 있어야 한다.
- 인터페이스 분리원칙 : 사용하지않는 인터페이스는 구현하지 말아야한다.
- 의존역전 원칙 : 의존관계를 맺을때 변화하기 쉬운것 보다는 변화하기 어려운것에 중점을 둬야한다.

# Javscript

# 동등연산자(”==”) 와 일치연산자(”===”) 의 차이는 무엇인가요?
1. 동등연산자는 타입까지 체크하지않지만 일치연산자는 타입까지 같아야한다라는 차이가있다.
[추가질문] falsy를 나타내는 값은 무엇이 있는가
1. 거짓 같은 값으로는 undefined, null, "", 0, 0n, -0 이 있다.

# 원시타입(Primitive)과 객체(Object)타입의 변수를 다른 변수에 할당할 때 차이를 설명해주세요.
1. 원시타입은 객체를 제외한 모든것이 원시타입이며 원시타입은 변수의 값을 다른 변수에 할당하여 추후에 값을 다른것으로 변환시켜도 원래의값은 변화하지않는다.
2. 객체는 원시타입과 다르게 할당하면 원래의 값이 변한다.

# Array 에서 원본 배열을 수정하는 메서드, 수정하지 않는 메서드
1. 수정하는 메서드로 pop(), push(), shift(), unshift(), splice()가 있다.
2. 수정하지 않는 메서드로 concat(), slice(), map(), filter() 정도가 있다.


# function과 arrow function의 차이점은 무엇인가?

## function
1. function는 실행시 window를 가리킨다.
2. 메소드를 실행할때에는 메소드를 소유하고있는 객체를 반환하고, 생성자 실행시에는 새롭게 만들어진 객체를 반환하고, 정적으로 결정되는게 아닌 동적으로 결정되며 apply, call, bind를 통해 변경이 가능하다.
3. function는 실행시 아규먼트를 사용할수있다.

## arrow function
1. this가 정적으로 결정된다.
2. 아규먼트를 사용할수없고 apply,call,bind사용이 불가능하다
3. 생성자를 사용할수없다.

[추가질문]
apply는 함수로 호출하고 배열로 인수를 넣는다.
call은 함수로 호출하고 인수를 넣는다.
bind는 함수를 생성하여 인수를 넣어야한다.

# 순수함수와 일급함수의 차이
1. 순수함수는 반환값이 일정한 함수이며 외부요소를 변경할수없다. 부수가없는 함수이다.
2. 일급함수는 함수에 함수로 값을 받을수있으며, 변수와 객체에 할당할수있다.

# 클로저의 대해서 설명하라
1. 클로저는 외부에서 선언된 함수에 접근할수있고, 함수가 선언되었을때의 환경을 기억하고 사용할수있는 매커니즘이다.
2. 클로저를 사용하면 은닉과 캡슐화를 보장받을수있고, 모듈화와 재사용에 용이하며, 비동기에 좋다.

# 비동기함수란?
1. 비동기 함수는 함수가 실행되었을때 특정함수의 동작이 끝났을때까지 기다리지않고 병렬로 실행되는 함수를 말한다.

[추가질문]
promise 프로미스는 비동기 처리에 사용됨으로써 함수가 처리될때의 약속을 의미한다. 비동기 처리가 끝날때를 보장받을수있다.
async/await은 ES7부터 등장하였으며 프로미스에 콜백지옥에서 벗어나 코드를 가독성있게 만들어주어 try-catch를 유연하게 만들수있다.

# TypeScript

# TypeScript 는 무엇이며, 사용할 때 얻는 이점과 불편한 점에 대해 말해주세요.
1. 타입스크립트는 MS에서 만든 오픈소스프로그래밍 언어 이며 javascript의 상위호환으로 javascript의 모든동작을 포함하고있으며,
   강력한 객체지향프로그래밍에 적합하다.

# 이점
1. 모듈화를 보장받을수있으며 정적타입을 지정하여 어플리케이션이 커질경우 타입에 안정성을 보장받을 수 있다.

# 단점
1. 러닝커브가 크며, 개발 소요시간이 길어지고 자바스크립트보다 무겁고, 브라우저에서 즉시실행이 되지않음으로 컴파일단계가 필요하다.

# TypeScript 에서 type alias 와 interface 의 차이에 대해 설명해주세요.
1. type alias는 유니온 타입, 인터셉션 타입을 유동적이게 만들수있다.
2. 인터페이스는 유니온 타입, 인터셉션 타입을 만들수없고 객체에 사용하는게 적합하다. 유동적이지 않다.

# Generic 에 대해 설명해주세요.
1. 제너릭은 함수 생성시 초기에 타입을 지정하지않고 추후에 지정함으로써 동적타입을 제공받을수있다.

# 유틸리티 타입은 무엇이있는가
1. 유틸리티 타입에는 Partial, Required, Readonly, Record, Pick, Omit, Exclude, Extract가 있다.

# Partial<T> 옵셔널을 만든다. (선택적 요소)
# Required<T> 모든 요소를 필수값으로 만든다
# Readonly<T> 모든 요소를 읽기 전용으로 만든다.
# Record<K, V> 키벨류를 쌍으로 넣어 객체 타입을 만든다.
# Pick<T, U> 타입에 요소를 추출하여 새로운 타입을 만든다.
# Omit<T, U> 타입에 요소를 제거하여 새로운 타입을 만든다.
# Exclude<T, U> 타입에서 요소를 제거한다.
# Extract<T, U> 타입에서 요소를 추출한다.

# 접근제어자는 무엇인가?
1. 접근제어자는 타입스크립트에서 클래스형태에 제어자를 입력함으로써 강력한 객체지향 프로그램을 만들수있게 해주는것이다.

[종류]
public 클래스 형태는 기본적으로 public 모든 제어가 가능하다.
privite 클래스 내부에서만 제어가 가능하다.
protected 클래스의 상위와 내부에서 접근이 가능하다.
readonly 읽기전용

# Node, React

# React Hook 에 대해 설명해주세요.
1. 리액트 훅은 function 기반에서 사용할수있는 state의 변경, 라이프사이클 등을 간편하게 할수있게 해주는것이다.
훅의 종류로는 useState, useMemo, useCallback, useReducer, useEffect 등등이 있다.

1. 리액트의 클로저는 외부의 변수를 임의로 지정해놓고 변수값이 기존저장한 값이랑 다를경우 함수를 실행하는 방식.

# 왜 state를 직접 변경하지 않는가.
1. 리액트에서의 state 직접변경은 허락하지 않는다, 이유는 state를 전역으로 관리함으로써 일관된 상태를 유지하고 어플리케이션의 의도치않은 리렌더를 방지하기 위함이다.

# React의 리렌더링 조건에는 무엇이 있는가.
1. useState의 변경 ,useCallback의 함수의 값을 변경, useMemo의 연산값의 변경, 부모컴포넌트의 props변경, useEffect에서의 변경, forceUpdate로 강제 리렌더

[추가질문]
1. 최적화 할수있는 방법 useState의 불변성 데이터를 만든다.
2. useCallback, useMemo로 최적화한다.
3. useEffect에서 비동기처리시 처리후 동작을 return function에서 처리를 끝낸다.

# useCallback과 useMemo의 차이점
1. useCallback는 함수에 사용하여 함수를 캐싱함으로써 함수의 값이 변경되었을때만 동작하게 만든다.
2. useMemo는 연산이 큰값을 저장하여 추후에 재사용에 용이하게 한다.

# React의 상태관리 방법에는 크게 두가지이다.
1. 부모와 자식간의 로컬상태관리
2. 전역으로 사용할수있는 전역상태관리

전역으로 사용할수있는 상태관리는 contextAPI, Redux/toolkit, Mobx, recoil등이 있다.

# React 의 Suspense 와 ErrorBoundary 에 대해 설명해주세요.
1. Suspense를 활용하여 데이터 비동기 처리시 컴포넌트의 지연속도를 늦추어 fallback으로 Loading 스피너, skeleton Ui를 보여주어 사용자에게 현재 데이터를 불러오고있다라는 표시를 할수있음으로 ui를 친절하게 보여줄수있다.
2. ErrorBoundary를 감싼 하위 요소에서 에러가 났을시 깨진ui를 표시하는게 아닌 컴포넌트 에러를 시각적으로 표시할수있다.









